import{_ as s,c as a,a as p,o as t}from"./app-M0eG63XU.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="函数文档" tabindex="-1"><a class="header-anchor" href="#函数文档"><span>函数文档</span></a></h1><p>欢迎您使用tools-pad 函数库🎉!</p><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始"><span>快速开始</span></a></h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> toolspad</span>
<span class="line"><span class="token comment"># 或者</span></span>
<span class="line"><span class="token function">yarn</span> <span class="token function">add</span> toolspad</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 按需引入</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> debounce<span class="token punctuation">,</span> throttle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;toolspad&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 或者全量引入</span></span>
<span class="line"><span class="token keyword">import</span> toolspad <span class="token keyword">from</span> <span class="token string">&#39;toolspad&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 防抖示例</span></span>
<span class="line"><span class="token keyword">const</span> debouncedFn <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行防抖函数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 节流示例</span></span>
<span class="line"><span class="token keyword">const</span> throttledFn <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行节流函数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>toolspad 提供了丰富的工具函数，您可以根据实际需求按需引入使用。每个函数都经过精心设计和测试，确保其可靠性和易用性。</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在使用某些函数时，请注意查看具体的参数要求和返回值说明，以确保正确使用。</p></div><h2 id="函数控制类" tabindex="-1"><a class="header-anchor" href="#函数控制类"><span>函数控制类</span></a></h2><h3 id="防抖-debounce" tabindex="-1"><a class="header-anchor" href="#防抖-debounce"><span>防抖(debounce)</span></a></h3><p><code>debounce</code> 函数的作用是确保一个函数在特定的时间间隔内不会被重复调用。只有当经过规定的等待时间后且没有再次触发相关事件时，该函数才会被执行。这在处理例如用户频繁点击按钮、文本输入实时搜索等场景时，能够有效减少不必要的函数执行次数，提升性能和用户体验。</p><h4 id="_1-引入该方法" tabindex="-1"><a class="header-anchor" href="#_1-引入该方法"><span>1.引入该方法</span></a></h4><p>在 Vue 项目（以 <code>App.vue</code> 文件为例）中，若要使用防抖函数，按如下方式从 toolspad 包中引入：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>debounce<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;toolspad&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-使用示例如下" tabindex="-1"><a class="header-anchor" href="#_2-使用示例如下"><span>2.使用示例如下</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token comment">// 首先定义一个普通函数，这里是简单的控制台输出函数</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">logFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;控制台输出啦&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第一个参数为要添加防抖的函数，即上面定义的 logFn</span></span>
<span class="line"><span class="token comment">// 第二个参数规定防抖时间，单位为毫秒，这里设置为 1000 毫秒（即 1 秒）</span></span>
<span class="line"><span class="token keyword">const</span> debounceFn <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>logFn<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 当调用 debounceFn 时，它会等待 1000 毫秒，如果在这期间没有再次调用 debounceFn，才会执行 logFn 函数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="节流-throttle" tabindex="-1"><a class="header-anchor" href="#节流-throttle"><span>节流(throttle)</span></a></h3><p><code>throttle</code> 函数用于确保一个函数在特定的时间间隔内不会被过度频繁地调用。具体而言，只有在经过规定的等待时间后且在此期间没有再次触发相关事件时，该函数才会执行。这在处理诸如窗口大小调整、滚动事件等可能频繁触发的场景中非常有用，可以有效避免函数执行过于频繁而导致的性能问题。</p><h4 id="_1-引入该方法-1" tabindex="-1"><a class="header-anchor" href="#_1-引入该方法-1"><span>1.引入该方法</span></a></h4><p>在 Vue 项目（以 <code>App.vue</code> 文件为例）中，若要使用节流函数，需先从 toolspad 包中引入它。示例代码如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>throttle<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;toolspad&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-使用示例如下-1" tabindex="-1"><a class="header-anchor" href="#_2-使用示例如下-1"><span>2.使用示例如下</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">logFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;控制台输出啦&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 第一个参数为要添加节流的函数，即我们刚刚定义的logFn</span></span>
<span class="line"><span class="token comment">// 第二个参数规定节流时间，单位为毫秒。这里设置为1000毫秒（即1秒）</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> throttleFn <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>logFn<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 此时，throttleFn就是经过节流处理后的函数</span></span>
<span class="line"><span class="token comment">// 当我们触发相关事件（例如某个按钮点击事件或者页面滚动事件等，具体取决于实际应用场景）调用throttleFn时，</span></span>
<span class="line"><span class="token comment">// 它会按照节流规则执行，即每隔1000毫秒才会真正执行一次logFn函数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数调用次数限制执行-callnexec" tabindex="-1"><a class="header-anchor" href="#函数调用次数限制执行-callnexec"><span>函数调用次数限制执行（callNExec）</span></a></h3><p><code>callNExec</code> 函数能够限制另一个函数的执行时机，仅当该函数被调用达到指定次数后，才会触发预先设定的函数执行操作，从而有效控制函数的调用频率与执行逻辑。</p><h4 id="_1-引入该方法-2" tabindex="-1"><a class="header-anchor" href="#_1-引入该方法-2"><span>1.引入该方法</span></a></h4><p>在基于 Vue 的项目中（以 <code>App.vue</code> 文件为例），引入 <code>callNExec</code> 函数的方式如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> callNExec <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;toolspad&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-输入参数" tabindex="-1"><a class="header-anchor" href="#_2-输入参数"><span>2.输入参数</span></a></h4><h5 id="threshold-参数" tabindex="-1"><a class="header-anchor" href="#threshold-参数"><span><code>threshold</code> 参数</span></a></h5><ul><li><strong>类型</strong>：<code>Number</code></li><li><strong>描述</strong>：设定的函数被调用次数阈值。</li></ul><h5 id="func-参数" tabindex="-1"><a class="header-anchor" href="#func-参数"><span><code>func</code> 参数</span></a></h5><ul><li><strong>类型</strong>：<code>Function</code></li><li><strong>描述</strong>：当函数被调用 n 次后需要执行的函数。</li></ul><h4 id="_3-使用示例如下" tabindex="-1"><a class="header-anchor" href="#_3-使用示例如下"><span>3.使用示例如下</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> testFn <span class="token operator">=</span> <span class="token function">callNExec</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>   <span class="token comment">// 每调用10次执行 则执行一次fn函数</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">testFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可配置时间间隔的函数包装器-createintervalfn" tabindex="-1"><a class="header-anchor" href="#可配置时间间隔的函数包装器-createintervalfn"><span>可配置时间间隔的函数包装器（createIntervalFn）</span></a></h3><p><code>createIntervalFn</code> 函数用于创建一个可配置时间间隔的函数包装器，支持本地持久化存储上次执行时间，确保函数按照指定的时间间隔执行。这对于需要定期执行某些操作（如数据同步、状态检查等）的场景非常有用。</p><h4 id="_1-引入该方法-3" tabindex="-1"><a class="header-anchor" href="#_1-引入该方法-3"><span>1.引入该方法</span></a></h4><p>在基于 Vue 的项目中（以 <code>App.vue</code> 文件为例），引入 <code>createIntervalFn</code> 函数的方式如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createIntervalFn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;toolspad&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-输入参数-1" tabindex="-1"><a class="header-anchor" href="#_2-输入参数-1"><span>2.输入参数</span></a></h4><h5 id="func-参数-1" tabindex="-1"><a class="header-anchor" href="#func-参数-1"><span><code>func</code> 参数</span></a></h5><ul><li><strong>类型</strong>：<code>Function | null</code></li><li><strong>描述</strong>：需要定期执行的函数，可以为 null。</li></ul><h5 id="options-参数" tabindex="-1"><a class="header-anchor" href="#options-参数"><span><code>options</code> 参数</span></a></h5><ul><li><strong>类型</strong>：<code>Object</code></li><li><strong>描述</strong>：配置选项对象，包含以下属性： <ul><li><code>key</code>（必填）：用于本地存储的唯一标识符</li><li><code>interval</code>（可选）：间隔数值，默认为 1</li><li><code>unit</code>（可选）：时间单位，可选值包括：&#39;second&#39;、&#39;minute&#39;、&#39;hour&#39;、&#39;day&#39;、&#39;month&#39;、&#39;year&#39;，默认为 &#39;day&#39;</li></ul></li></ul><h4 id="_3-使用示例如下-1" tabindex="-1"><a class="header-anchor" href="#_3-使用示例如下-1"><span>3.使用示例如下</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token comment">// 创建一个每天执行一次的函数</span></span>
<span class="line"><span class="token keyword">const</span> dailyTask <span class="token operator">=</span> <span class="token function">createIntervalFn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行每日任务&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  key<span class="token operator">:</span> <span class="token string">&#39;dailyTask&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  interval<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  unit<span class="token operator">:</span> <span class="token string">&#39;day&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建一个每小时执行一次的函数</span></span>
<span class="line"><span class="token keyword">const</span> hourlyTask <span class="token operator">=</span> <span class="token function">createIntervalFn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行每小时任务&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  key<span class="token operator">:</span> <span class="token string">&#39;hourlyTask&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  interval<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  unit<span class="token operator">:</span> <span class="token string">&#39;hour&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建一个每30分钟执行一次的函数</span></span>
<span class="line"><span class="token keyword">const</span> halfHourTask <span class="token operator">=</span> <span class="token function">createIntervalFn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行每30分钟任务&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  key<span class="token operator">:</span> <span class="token string">&#39;halfHourTask&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  interval<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">  unit<span class="token operator">:</span> <span class="token string">&#39;minute&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 调用这些函数</span></span>
<span class="line"><span class="token function">dailyTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">hourlyTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">halfHourTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据处理类" tabindex="-1"><a class="header-anchor" href="#数据处理类"><span>数据处理类</span></a></h2><h3 id="深拷贝-deepcopy" tabindex="-1"><a class="header-anchor" href="#深拷贝-deepcopy"><span>深拷贝(deepCopy)</span></a></h3><p><code>deepCopy</code> 函数用于创建一个原始对象的全新副本，新副本与原始对象在内存中完全独立，对原始对象的任何修改都不会影响到深拷贝后的对象，反之亦然。这在处理复杂数据结构（如嵌套对象、数组等）时非常关键，能够避免数据的意外篡改和副作用。</p><h4 id="_1-引入该方法-4" tabindex="-1"><a class="header-anchor" href="#_1-引入该方法-4"><span>1.引入该方法</span></a></h4><p>在 Vue 项目（以 <code>App.vue</code> 文件为例）中，引入深拷贝函数的方式如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>deepCopy<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;toolspad&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-使用示例如下-2" tabindex="-1"><a class="header-anchor" href="#_2-使用示例如下-2"><span>2.使用示例如下</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token comment">// 首先创建一个包含嵌套对象的示例对象 obj1</span></span>
<span class="line"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>son<span class="token operator">:</span><span class="token punctuation">{</span>one<span class="token operator">:</span><span class="token string">&#39;base&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 deepCopy 函数对 obj1 进行深拷贝，将结果赋值给 obj2</span></span>
<span class="line"><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 对原始对象 obj1 的嵌套属性进行修改</span></span>
<span class="line">obj1<span class="token punctuation">.</span>son<span class="token punctuation">.</span>one <span class="token operator">=</span> <span class="token string">&#39;dataChange&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 输出深拷贝后的对象 obj2，其嵌套属性的值仍然为 &#39;base&#39;，因为它是独立的副本</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token string">&#39;obj2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"></span>
<span class="line"><span class="token comment">// 输出原始对象 obj1，其嵌套属性的值已被修改为 &#39;dataChange&#39;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span><span class="token string">&#39;obj1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扁平转树-totree" tabindex="-1"><a class="header-anchor" href="#扁平转树-totree"><span>扁平转树（toTree）</span></a></h3><p><code>toTree</code> 函数用于将给定的扁平数据结构高效地转换为树状数据结构，使得数据呈现出清晰的父子层级关系。。</p><h4 id="_1-引入该方法-5" tabindex="-1"><a class="header-anchor" href="#_1-引入该方法-5"><span>1.引入该方法</span></a></h4><p>在 Vue 项目（以 <code>App.vue</code> 文件为例）中，引入扁平转树函数的方式如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> toTree <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;toolspad&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-输入参数-2" tabindex="-1"><a class="header-anchor" href="#_2-输入参数-2"><span>2.输入参数</span></a></h4><h5 id="data-参数" tabindex="-1"><a class="header-anchor" href="#data-参数"><span><code>data</code> 参数</span></a></h5><ul><li><strong>类型</strong>：<code>Array</code></li><li><strong>描述</strong>：需要用户传入一个扁平化数据。</li></ul><h5 id="idkey-参数-可选" tabindex="-1"><a class="header-anchor" href="#idkey-参数-可选"><span><code>idKey</code> 参数（可选）</span></a></h5><ul><li><strong>类型</strong>：<code>String</code></li><li><strong>默认值</strong>：<code>id</code></li><li><strong>描述</strong>：用于指定在扁平数据节点对象中作为节点唯一标识的键名。</li></ul><h5 id="parentidkey-参数-可选" tabindex="-1"><a class="header-anchor" href="#parentidkey-参数-可选"><span><code>parentIdKey</code> 参数（可选）</span></a></h5><ul><li><strong>类型</strong>：<code>String</code></li><li><strong>默认值</strong>：<code>parentId</code></li><li><strong>描述</strong>：用于指定在扁平数据节点对象中作为父节点标识的键名。</li></ul><h4 id="_3-使用示例如下-2" tabindex="-1"><a class="header-anchor" href="#_3-使用示例如下-2"><span>3.使用示例如下</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;用户中心&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;parentId&quot;</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;订单中心&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;parentId&quot;</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;系统管理&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;parentId&quot;</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;所有订单&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;parentId&quot;</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;待发货&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;parentId&quot;</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;订单导出&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;parentId&quot;</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;菜单设置&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;parentId&quot;</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;权限管理&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;parentId&quot;</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;系统权限&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;parentId&quot;</span><span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;角色设置&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;parentId&quot;</span><span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toTree</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印转树后的数据</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>用户自定义节点 代码实例如下：</p></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;ID&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;用户中心&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;ID&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;订单中心&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;ID&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;系统管理&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;ID&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;所有订单&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;ID&quot;</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;待发货&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;ID&quot;</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;订单导出&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;ID&quot;</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;菜单设置&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;ID&quot;</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;权限管理&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;ID&quot;</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;系统权限&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string-property property">&quot;ID&quot;</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;角色设置&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;orderNum&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toTree</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;pid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印转树后的数据</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组乱序-disorderarray" tabindex="-1"><a class="header-anchor" href="#数组乱序-disorderarray"><span>数组乱序（disorderArray）</span></a></h3><p><code>disorderArray</code> 函数旨在对给定的数组进行随机打乱操作，改变数组元素原本的顺序，使其呈现出无序的状态，方便在诸如随机排序、模拟随机情况等场景下使用。</p><h4 id="_1-引入该方法-6" tabindex="-1"><a class="header-anchor" href="#_1-引入该方法-6"><span>1.引入该方法</span></a></h4><p>在 Vue 项目（以 <code>App.vue</code> 文件为例）中，引入数组乱序函数的方式如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> disorderArray <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;toolspad&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-输入参数-3" tabindex="-1"><a class="header-anchor" href="#_2-输入参数-3"><span>2.输入参数</span></a></h4><h5 id="arr-参数" tabindex="-1"><a class="header-anchor" href="#arr-参数"><span><code>arr</code> 参数</span></a></h5><ul><li><strong>类型</strong>：<code>Array</code></li><li><strong>描述</strong>：用户需要传入一个希望进行乱序操作的数组。无论数组元素是何种类型，函数都会尝试对其顺序进行打乱处理。</li></ul><h4 id="_3-使用示例如下-3" tabindex="-1"><a class="header-anchor" href="#_3-使用示例如下-3"><span>3.使用示例如下</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">disorderArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印乱序后的数组</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组滤假值-compactarray" tabindex="-1"><a class="header-anchor" href="#数组滤假值-compactarray"><span>数组滤假值（compactArray）</span></a></h3><p><code>compactArray</code> 函数旨在对输入的数组进行过滤处理，它会精准地去除数组中那些在 JavaScript 里被视作 &quot;假值&quot; 的元素，包含 <code>false</code>、<code>null</code>、<code>0</code>、<code>&quot;&quot;</code>（空字符串）、<code>undefined</code> 和 <code>NaN</code> 等，只留下 &quot;真值&quot; 元素，以此生成一个新的数组。</p><h4 id="_1-引入该方法-7" tabindex="-1"><a class="header-anchor" href="#_1-引入该方法-7"><span>1.引入该方法</span></a></h4><p>在基于 Vue 的项目中（以 <code>App.vue</code> 文件为例），引入 <code>compactArray</code> 函数的方式如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> compactArray <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;toolspad&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-输入参数-4" tabindex="-1"><a class="header-anchor" href="#_2-输入参数-4"><span>2.输入参数</span></a></h4><h5 id="arr-参数-1" tabindex="-1"><a class="header-anchor" href="#arr-参数-1"><span><code>arr</code> 参数</span></a></h5><ul><li><strong>类型</strong>：<code>Array</code></li><li><strong>描述</strong>：用户需要向函数提供一个想要进行滤假值操作的目标数组。</li></ul><h4 id="_3-使用示例如下-4" tabindex="-1"><a class="header-anchor" href="#_3-使用示例如下-4"><span>3.使用示例如下</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line">  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">compactArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 [10,20]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="工具类" tabindex="-1"><a class="header-anchor" href="#工具类"><span>工具类</span></a></h2><h3 id="时间格式化函数-formatdate" tabindex="-1"><a class="header-anchor" href="#时间格式化函数-formatdate"><span>时间格式化函数（formatDate）</span></a></h3><p><code>formatDate</code> 函数是一个用于对日期时间进行灵活格式化，并可按需进行时间偏移操作的实用函数，它能帮助开发者方便地将 Date 对象按照指定格式转化为符合要求的字符串表示形式，同时支持根据给定的时间偏移量获取相对的过去或未来的时间后再进行格式化。</p><h4 id="_1-引入该方法-8" tabindex="-1"><a class="header-anchor" href="#_1-引入该方法-8"><span>1.引入该方法</span></a></h4><p>在 Vue 项目（以 <code>App.vue</code> 文件为例）中，引入时间格式化函数的方式如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> formatDate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;toolspad&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-输入参数-5" tabindex="-1"><a class="header-anchor" href="#_2-输入参数-5"><span>2.输入参数</span></a></h4><h5 id="date-参数" tabindex="-1"><a class="header-anchor" href="#date-参数"><span><code>date</code> 参数</span></a></h5><ul><li><strong>类型</strong>：<code>Date</code></li><li><strong>描述</strong>：需要用户传入一个要进行格式化以及可能的时间偏移操作的日期时间对象。</li></ul><h5 id="format-参数" tabindex="-1"><a class="header-anchor" href="#format-参数"><span><code>format</code> 参数</span></a></h5><ul><li><strong>类型</strong>：<code>String</code></li><li><strong>描述</strong>：用于指定日期时间最终的输出格式，格式字符串中可以包含特定的占位符（如 <code>YYYY</code>、<code>MM</code>、<code>DD</code>、<code>hh</code>、<code>mm</code>、<code>ss</code>），这些占位符会在函数内部被替换为对应的实际时间分量的字符串表示形式。例如，<code>&#39;YYYY-MM-DD hh:mm:ss&#39;</code> 表示输出的格式会是类似 <code>2024-12-09 15:30:00</code> 的形式，展示完整的年、月、日、时、分、秒信息；而 <code>&#39;MM/DD/YYYY&#39;</code> 则会输出如 <code>12/09/2024</code> 的格式，按照月、日、年的顺序展示日期部分并用 <code>/</code> 进行分隔。</li></ul><h5 id="offset-参数-可选" tabindex="-1"><a class="header-anchor" href="#offset-参数-可选"><span><code>offset</code> 参数（可选）</span></a></h5><ul><li><p><strong>类型</strong>：<code>Object</code></p></li><li><p><strong>默认值</strong>：<code>{}</code></p></li><li><p><strong>描述</strong>：此参数是可选的，用于指定相对于传入的 date 的时间偏移情况，正数表示未来的时间，负数表示过去的时间。包含以下四个可选属性：</p><table><thead><tr><th>属性名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>days</code></td><td><code>number</code>（可选）</td><td>用于指定日数的偏移量。<code>{ days: 3 }</code> 会使日期往后推 3 天。</td></tr><tr><td><code>weeks</code></td><td><code>number</code>（可选）</td><td>用于指定周数的偏移量。例如，<code>{ weeks: 1 }</code> 表示时间往后推一周（即获取下一周对应的时间），<code>{ weeks: -1 }</code> 则表示往前推一周（获取上一周对应的时间）。</td></tr><tr><td><code>months</code></td><td><code>number</code>（可选）</td><td>用于指定月数的偏移量。像 <code>{ months: 2 }</code> 会使日期往后推 2 个月，传入负数则获取过去月份对应的日期。</td></tr><tr><td><code>years</code></td><td><code>number</code>（可选）</td><td>用于指定年数的偏移量。比如 <code>{ years: 1 }</code> 能获取到明年对应的日期，传入负数则获取过去年份对应的日期。</td></tr><tr><td><code>hours</code></td><td><code>number</code>（可选）</td><td>用于指定小时数的偏移量。比如 <code>{ hours: 1 }</code> 能获取到下个小时对应的时间，传入负数则获取上个小时对应的时间。</td></tr><tr><td><code>minutes</code></td><td><code>number</code>（可选）</td><td>用于指定分钟的偏移量。比如 <code>{ minutes: 1 }</code> 能获取到下一分钟对应的时间，传入负数则获取上一分钟对应的时间。</td></tr><tr><td><code>seconds</code></td><td><code>number</code>（可选）</td><td>用于指定秒的偏移量。比如 <code>{ seconds: 30 }</code> 能获取到三十秒后对应的时间，传入负数则获取三十秒前对应的时间。</td></tr></tbody></table></li></ul><h4 id="_3-使用示例如下-5" tabindex="-1"><a class="header-anchor" href="#_3-使用示例如下-5"><span>3.使用示例如下</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token comment">// 示例1：格式化当前时间，无偏移量，格式为 &#39;YYYY-MM-DD&#39;</span></span>
<span class="line"><span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> formattedNow <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> <span class="token string">&#39;YYYY-MM-DD&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前时间格式化：&#39;</span><span class="token punctuation">,</span> formattedNow<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 示例2：获取上一周的今天，格式为 &#39;YYYY-MM-DD&#39;</span></span>
<span class="line"><span class="token keyword">const</span> lastWeek <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> <span class="token string">&#39;YYYY-MM-DD&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> weeks<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;上一周的今天：&#39;</span><span class="token punctuation">,</span> lastWeek<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 示例3：获取下个月的今天，格式为 &#39;YYYY-MM-DD&#39;</span></span>
<span class="line"><span class="token keyword">const</span> nextMonth <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> <span class="token string">&#39;YYYY-MM-DD&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> months<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;下个月的今天：&#39;</span><span class="token punctuation">,</span> nextMonth<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 示例4：获取明年的今天，格式为 &#39;YYYY-MM-DD&#39;</span></span>
<span class="line"><span class="token keyword">const</span> nextYear <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> <span class="token string">&#39;YYYY-MM-DD&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> years<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;明年的今天：&#39;</span><span class="token punctuation">,</span> nextYear<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 示例5：自定义格式并进行时间偏移，包含日数偏移</span></span>
<span class="line"><span class="token keyword">const</span> customFormatAndOffset <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> <span class="token string">&#39;MM/DD/YYYY hh:mm&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> weeks<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> months<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> years<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> days<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;自定义格式及偏移量的结果：&#39;</span><span class="token punctuation">,</span> customFormatAndOffset<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 示例6：仅格式化时间中的时分秒部分，无时间偏移，格式为 &#39;hh:mm:ss&#39;</span></span>
<span class="line"><span class="token keyword">const</span> timeOnly <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;hh:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;仅时间部分格式化：&#39;</span><span class="token punctuation">,</span> timeOnly<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断设备类型-checkdevicetype" tabindex="-1"><a class="header-anchor" href="#判断设备类型-checkdevicetype"><span>判断设备类型（checkDeviceType）</span></a></h3><p><code>checkDeviceType</code> 函数用于精准识别用户当前所使用设备的操作系统类别，其返回值明确区分设备是运行 <code>Android</code> 系统、<code>iOS</code> 系统还是属于<code>桌面端环境</code>。这在开发多端适配应用或根据不同设备类型提供特定功能与体验的场景中极为关键，能够帮助开发者依据设备特性灵活调整应用逻辑与界面展示。</p><h4 id="_1-引入该方法-9" tabindex="-1"><a class="header-anchor" href="#_1-引入该方法-9"><span>1.引入该方法</span></a></h4><p>在 Vue 项目（以 <code>App.vue</code> 文件为例）中，引入判断设备类型函数的方式如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> checkDeviceType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;toolspad&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-使用示例如下-3" tabindex="-1"><a class="header-anchor" href="#_2-使用示例如下-3"><span>2.使用示例如下</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token comment">// 调用 checkDeviceType 函数来获取设备类型</span></span>
<span class="line"><span class="token keyword">const</span> deviceType <span class="token operator">=</span> <span class="token function">checkDeviceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 根据返回的设备类型进行不同的操作</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>deviceType <span class="token operator">===</span> <span class="token string">&#39;Android&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前设备为 Android 系统。&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>deviceType <span class="token operator">===</span> <span class="token string">&#39;iOS&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前设备为 iOS 系统。&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前设备为桌面端。&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成随机数-getrandom" tabindex="-1"><a class="header-anchor" href="#生成随机数-getrandom"><span>生成随机数（getRandom）</span></a></h3><p><code>getRandom</code> 函数用于在指定的数值范围内生成一个随机整数，可满足项目中各种需要随机取值的场景，比如随机生成索引、模拟随机数据等。</p><h4 id="_1-引入该方法-10" tabindex="-1"><a class="header-anchor" href="#_1-引入该方法-10"><span>1.引入该方法</span></a></h4><p>在 Vue 项目（以 <code>App.vue</code> 文件为例）中，引入生成随机数函数的方式如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> getRandom <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;toolspad&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-使用示例如下-4" tabindex="-1"><a class="header-anchor" href="#_2-使用示例如下-4"><span>2.使用示例如下</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="App.vue"><pre><code><span class="line"><span class="token comment">// 调用getRandom函数来生成一个介于1（包含）和10（包含）之间的随机整数</span></span>
<span class="line"><span class="token keyword">const</span> randomNumber <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">生成的随机数为: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>randomNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 也可以根据生成的随机数进行不同的操作，以下是一个简单示例，假设根据随机数决定是否显示某个元素</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>randomNumber <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;随机数为偶数，执行相关操作，比如显示某个元素。&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;随机数为奇数，执行其他相关操作，比如隐藏某个元素。&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,123)]))}const i=s(e,[["render",o],["__file","get-started.html.vue"]]),r=JSON.parse('{"path":"/get-started.html","title":"函数文档","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"快速开始","slug":"快速开始","link":"#快速开始","children":[{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"函数控制类","slug":"函数控制类","link":"#函数控制类","children":[{"level":3,"title":"防抖(debounce)","slug":"防抖-debounce","link":"#防抖-debounce","children":[]},{"level":3,"title":"节流(throttle)","slug":"节流-throttle","link":"#节流-throttle","children":[]},{"level":3,"title":"函数调用次数限制执行（callNExec）","slug":"函数调用次数限制执行-callnexec","link":"#函数调用次数限制执行-callnexec","children":[]},{"level":3,"title":"可配置时间间隔的函数包装器（createIntervalFn）","slug":"可配置时间间隔的函数包装器-createintervalfn","link":"#可配置时间间隔的函数包装器-createintervalfn","children":[]}]},{"level":2,"title":"数据处理类","slug":"数据处理类","link":"#数据处理类","children":[{"level":3,"title":"深拷贝(deepCopy)","slug":"深拷贝-deepcopy","link":"#深拷贝-deepcopy","children":[]},{"level":3,"title":"扁平转树（toTree）","slug":"扁平转树-totree","link":"#扁平转树-totree","children":[]},{"level":3,"title":"数组乱序（disorderArray）","slug":"数组乱序-disorderarray","link":"#数组乱序-disorderarray","children":[]},{"level":3,"title":"数组滤假值（compactArray）","slug":"数组滤假值-compactarray","link":"#数组滤假值-compactarray","children":[]}]},{"level":2,"title":"工具类","slug":"工具类","link":"#工具类","children":[{"level":3,"title":"时间格式化函数（formatDate）","slug":"时间格式化函数-formatdate","link":"#时间格式化函数-formatdate","children":[]},{"level":3,"title":"判断设备类型（checkDeviceType）","slug":"判断设备类型-checkdevicetype","link":"#判断设备类型-checkdevicetype","children":[]},{"level":3,"title":"生成随机数（getRandom）","slug":"生成随机数-getrandom","link":"#生成随机数-getrandom","children":[]}]}],"git":{"updatedTime":1734086194000,"contributors":[{"name":"hwb","email":"1065092792@qq.com","commits":15}]},"filePathRelative":"get-started.md"}');export{i as comp,r as data};
